// This file is generated by My::MySRefl::AutoRefl

#pragma once

#include <MySRefl/MySRefl.h>

template <>
struct My::MySRefl::TypeInfo<My::MyGE::RootDescriptorType>
    : TypeInfoBase<My::MyGE::RootDescriptorType> {
#ifdef MY_MYSREFL_NOT_USE_NAMEOF
  static constexpr char name[33] = "My::MyGE::RootDescriptorType";
#endif
  static constexpr AttrList attrs = {};
  static constexpr FieldList fields = {
      Field{TSTR("SRV"), Type::SRV},
      Field{TSTR("UAV"), Type::UAV},
      Field{TSTR("CBV"), Type::CBV},
  };
};

template <>
struct My::MySRefl::TypeInfo<My::MyGE::DescriptorRange>
    : TypeInfoBase<My::MyGE::DescriptorRange> {
#ifdef MY_MYSREFL_NOT_USE_NAMEOF
  static constexpr char name[30] = "My::MyGE::DescriptorRange";
#endif
  static constexpr AttrList attrs = {};
  static constexpr FieldList fields = {
      Field{TSTR("RangeType"), &Type::RangeType},
      Field{TSTR("NumDescriptors"), &Type::NumDescriptors},
      Field{TSTR("BaseShaderRegister"), &Type::BaseShaderRegister},
      Field{TSTR("RegisterSpace"), &Type::RegisterSpace},
      Field{
          TSTR("Init"), &Type::Init,
          AttrList{
              Attr{TSTR(MyMeta::default_functions),
                   std::tuple{[](Type* __this,
                                 My::MyGE::RootDescriptorType RangeType,
                                 unsigned int NumDescriptors,
                                 unsigned int BaseShaderRegister) {
                     return __this->Init(
                         std::forward<My::MyGE::RootDescriptorType>(RangeType),
                         std::forward<unsigned int>(NumDescriptors),
                         std::forward<unsigned int>(BaseShaderRegister));
                   }}},
          }},
  };
};

template <>
struct My::MySRefl::TypeInfo<My::MyGE::RootConstants>
    : TypeInfoBase<My::MyGE::RootConstants> {
#ifdef MY_MYSREFL_NOT_USE_NAMEOF
  static constexpr char name[28] = "My::MyGE::RootConstants";
#endif
  static constexpr AttrList attrs = {};
  static constexpr FieldList fields = {
      Field{TSTR("ShaderRegister"), &Type::ShaderRegister},
      Field{TSTR("RegisterSpace"), &Type::RegisterSpace},
      Field{TSTR("Num32BitValues"), &Type::Num32BitValues},
  };
};

template <>
struct My::MySRefl::TypeInfo<My::MyGE::RootDescriptor>
    : TypeInfoBase<My::MyGE::RootDescriptor> {
#ifdef MY_MYSREFL_NOT_USE_NAMEOF
  static constexpr char name[29] = "My::MyGE::RootDescriptor";
#endif
  static constexpr AttrList attrs = {};
  static constexpr FieldList fields = {
      Field{TSTR("DescriptorType"), &Type::DescriptorType},
      Field{TSTR("ShaderRegister"), &Type::ShaderRegister},
      Field{TSTR("RegisterSpace"), &Type::RegisterSpace,
            AttrList{
                Attr{TSTR(MyMeta::initializer),
                     []() -> unsigned int {
                       return {0};
                     }},
            }},
      Field{TSTR("Init"), &Type::Init,
            AttrList{
                Attr{TSTR(MyMeta::default_functions),
                     std::tuple{[](Type* __this,
                                   My::MyGE::RootDescriptorType DescriptorType,
                                   unsigned int ShaderRegister) {
                       return __this->Init(
                           std::forward<My::MyGE::RootDescriptorType>(
                               DescriptorType),
                           std::forward<unsigned int>(ShaderRegister));
                     }}},
            }},
  };
};
