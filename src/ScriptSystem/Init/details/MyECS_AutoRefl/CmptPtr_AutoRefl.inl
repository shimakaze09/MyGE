// This file is generated by My::MySRefl::AutoRefl

#pragma once

#include <MySRefl/MySRefl.h>

template <>
struct My::MySRefl::TypeInfo<My::MyECS::CmptPtr>
    : TypeInfoBase<My::MyECS::CmptPtr> {
#ifdef MY_MYSREFL_NOT_USE_NAMEOF
  static constexpr char name[20] = "My::MyECS::CmptPtr";
#endif
  static constexpr AttrList attrs = {};
  static constexpr FieldList fields = {
      Field{TSTR(MyMeta::constructor),
            WrapConstructor<Type(MyECS::CmptType, void*)>()},
      Field{TSTR(MyMeta::constructor), WrapConstructor<Type()>()},
      Field{TSTR("Ptr"), &Type::Ptr},
      Field{TSTR("Type"), &Type::Type},
      Field{TSTR("Invalid"), &Type::Invalid},
      Field{TSTR("Valid"), &Type::Valid},
  };
};

template <>
struct My::MySRefl::TypeInfo<My::MyECS::CmptAccessPtr>
    : TypeInfoBase<My::MyECS::CmptAccessPtr> {
#ifdef MY_MYSREFL_NOT_USE_NAMEOF
  static constexpr char name[26] = "My::MyECS::CmptAccessPtr";
#endif
  static constexpr AttrList attrs = {};
  static constexpr FieldList fields = {
      Field{TSTR(MyMeta::constructor),
            WrapConstructor<Type(MyECS::CmptType, void*, MyECS::AccessMode)>()},
      Field{TSTR(MyMeta::constructor),
            WrapConstructor<Type(MyECS::CmptAccessType, void*)>()},
      Field{TSTR(MyMeta::constructor),
            WrapConstructor<Type(MyECS::CmptPtr, MyECS::AccessMode)>()},
      Field{TSTR(MyMeta::constructor), WrapConstructor<Type(MyECS::CmptPtr)>()},
      Field{TSTR(MyMeta::constructor), WrapConstructor<Type()>()},
      Field {
        TSTR("operatorCmptPtr"),
        &Type::operator MyECS::CmptPtr },
        Field{TSTR("Ptr"), &Type::Ptr},
        Field{TSTR("AccessType"), &Type::AccessType},
        Field{TSTR("Invalid"), &Type::Invalid},
        Field{TSTR("Valid"), &Type::Valid},
      };
};