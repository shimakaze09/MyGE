// This file is generated by My::MySRefl::AutoRefl

#pragma once

#include <MySRefl/MySRefl.h>

template <>
struct My::MySRefl::TypeInfo<My::MyECS::SystemTraits>
    : TypeInfoBase<My::MyECS::SystemTraits> {
#ifdef MY_MYSREFL_NOT_USE_NAMEOF
  static constexpr char name[25] = "My::MyECS::SystemTraits";
#endif
  static constexpr AttrList attrs = {};
  static constexpr FieldList fields = {
      Field{TSTR(MyMeta::constructor), WrapConstructor<Type()>()},
      Field{TSTR(MyMeta::constructor),
            WrapConstructor<Type(const MyECS::SystemTraits&)>()},
      Field{TSTR(MyMeta::constructor),
            WrapConstructor<Type(MyECS::SystemTraits&&)>()},
      Field{TSTR("operator="),
            static_cast<MyECS::SystemTraits& (Type::*)(MyECS::SystemTraits&)>(
                &Type::operator=)},
      Field{TSTR("operator="),
            static_cast<MyECS::SystemTraits& (
                Type::*)(MyECS::SystemTraits&&) noexcept>(&Type::operator=)},
      Field{TSTR("Register"),
            static_cast<size_t (Type::*)(std::string)>(&Type::Register)},
      Field{TSTR("RegisterOnCreate"), &Type::RegisterOnCreate},
      Field{TSTR("RegisterOnActivate"), &Type::RegisterOnActivate},
      Field{TSTR("RegisterOnUpdate"), &Type::RegisterOnUpdate},
      Field{TSTR("RegisterOnDeactivate"), &Type::RegisterOnDeactivate},
      Field{TSTR("RegisterOnDestroy"), &Type::RegisterOnDestroy},
      Field{TSTR("Nameof"), &Type::Nameof},
      Field{
          TSTR("GetID"),
          static_cast<size_t (Type::*)(std::string_view) const>(&Type::GetID)},
      Field{TSTR("IsRegistered"),
            static_cast<bool (Type::*)(size_t) const noexcept>(
                &Type::IsRegistered)},
      Field{TSTR("GetNameIDMap"), &Type::GetNameIDMap},
  };
};
