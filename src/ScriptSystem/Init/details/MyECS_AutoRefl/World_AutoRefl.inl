// This file is generated by My::MySRefl::AutoRefl

#pragma once

#include <MySRefl/MySRefl.h>
#include <MyTemplate/Func.h>

template <>
struct My::MySRefl::TypeInfo<My::MyECS::World>
    : TypeInfoBase<My::MyECS::World> {
#ifdef MY_MYSREFL_NOT_USE_NAMEOF
  static constexpr char name[18] = "My::MyECS::World";
#endif
  static constexpr AttrList attrs = {};
  static constexpr FieldList fields = {
      Field{TSTR(MyMeta::constructor), WrapConstructor<Type()>()},
      Field{TSTR(MyMeta::constructor),
            WrapConstructor<Type(const MyECS::World&)>()},
      Field{TSTR(MyMeta::constructor), WrapConstructor<Type(MyECS::World&&)>()},
      Field{TSTR(MyMeta::destructor), WrapDestructor<Type>()},
      Field{TSTR("systemMngr"), &Type::systemMngr},
      Field{TSTR("entityMngr"), &Type::entityMngr},
      Field{TSTR("Update"), &Type::Update},
      Field{
          TSTR("AddCommand"), &Type::AddCommand,
          AttrList{
              Attr{TSTR(MyMeta::default_functions),
                   std::tuple{[](Type* __this, std::function<void()> command) {
                     return __this->AddCommand(
                         std::forward<std::function<void()>>(command));
                   }}},
          }},
      Field{TSTR("DumpUpdateJobGraph"), &Type::DumpUpdateJobGraph},
      Field{TSTR("GenUpdateFrameGraph"), &Type::GenUpdateFrameGraph},
      Field{TSTR("Accept"), &Type::Accept},
      Field{TSTR("RunEntityJob"),
            My::DecayLambda(
                [](My::MyECS::World* world,
                   std::function<void(
                       My::MyECS::World*, My::MyECS::SingletonsView,
                       My::MyECS::Entity, size_t, My::MyECS::CmptsView)>
                       func,
                   My::MyECS::ArchetypeFilter archetypeFilter,
                   My::MyECS::CmptLocator cmptLocator,
                   My::MyECS::SingletonLocator singletonLocator,
                   bool isParallel) {
                  world->RunEntityJob(
                      std::move(func), isParallel, std::move(archetypeFilter),
                      std::move(cmptLocator), std::move(singletonLocator));
                })},
      Field{TSTR("RunChunkJob"),
            My::DecayLambda(
                [](My::MyECS::World* world,
                   std::function<void(My::MyECS::World*, My::MyECS::ChunkView,
                                      My::MyECS::SingletonsView)>
                       func,
                   My::MyECS::ArchetypeFilter archetypeFilter,
                   My::MyECS::SingletonLocator singletonLocator,
                   bool isParallel) {
                  world->RunChunkJob(std::move(func),
                                     std::move(archetypeFilter), isParallel,
                                     std::move(singletonLocator));
                })},
  };
};
