// This file is generated by My::MySRefl::AutoRefl

#pragma once

#include <MySRefl/MySRefl.h>

template <>
struct My::MySRefl::TypeInfo<My::MyECS::EntityMngr>
    : TypeInfoBase<My::MyECS::EntityMngr> {
#ifdef MY_MYSREFL_NOT_USE_NAMEOF
  static constexpr char name[23] = "My::MyECS::EntityMngr";
#endif
  static constexpr AttrList attrs = {};
  static constexpr FieldList fields = {
      Field{TSTR(MyMeta::constructor), WrapConstructor<Type()>()},
      Field{TSTR(MyMeta::constructor),
            WrapConstructor<Type(const MyECS::EntityMngr&)>()},
      Field{TSTR(MyMeta::constructor),
            WrapConstructor<Type(MyECS::EntityMngr&&)>()},
      Field{TSTR(MyMeta::destructor), WrapDestructor<Type>()},
      Field{TSTR("cmptTraits"), &Type::cmptTraits},
      Field{TSTR("Create"),
            static_cast<MyECS::Entity (Type::*)(Span<const MyECS::CmptType>)>(
                &Type::Create)},
      Field{
          TSTR("Create"),
          static_cast<MyECS::Entity (Type::*)(MyECS::CmptType)>(&Type::Create)},
      Field{TSTR("Instantiate"), &Type::Instantiate},
      Field{TSTR("Attach"),
            static_cast<void (Type::*)(
                MyECS::Entity, Span<const MyECS::CmptType>)>(&Type::Attach)},
      Field{TSTR("Attach"),
            static_cast<void (Type::*)(MyECS::Entity, MyECS::CmptType)>(
                &Type::Attach)},
      Field{TSTR("Detach"),
            static_cast<void (Type::*)(
                MyECS::Entity, Span<const MyECS::CmptType>)>(&Type::Detach)},
      Field{TSTR("Detach"),
            static_cast<void (Type::*)(MyECS::Entity, MyECS::CmptType)>(
                &Type::Detach)},
      Field{TSTR("Have"),
            static_cast<bool (Type::*)(MyECS::Entity, MyECS::CmptType) const>(
                &Type::Have)},
      Field{TSTR("Get"),
            static_cast<MyECS::CmptPtr (Type::*)(MyECS::Entity, MyECS::CmptType)
                            const>(&Type::Get)},
      Field{TSTR("Components"), &Type::Components},
      Field{TSTR("Exist"), &Type::Exist},
      Field{TSTR("Destroy"), &Type::Destroy},
      Field{TSTR("TotalEntityNum"), &Type::TotalEntityNum},
      Field{TSTR("EntityNum"), &Type::EntityNum},
      Field{TSTR("GetEntityFreeEntries"), &Type::GetEntityFreeEntries},
      Field{TSTR("GetEntityVersion"), &Type::GetEntityVersion},
      Field{TSTR("IsSingleton"), &Type::IsSingleton},
      Field{TSTR("GetSingletonEntity"), &Type::GetSingletonEntity},
      Field{TSTR("GetSingleton"),
            static_cast<MyECS::CmptPtr (Type::*)(MyECS::CmptType) const>(
                &Type::GetSingleton)},
      Field{TSTR("GetCmptArray"),
            static_cast<std::vector<MyECS::CmptPtr> (Type::*)(
                const MyECS::ArchetypeFilter&, MyECS::CmptType) const>(
                &Type::GetCmptArray)},
      Field{TSTR("GetEntityArray"), &Type::GetEntityArray},
      Field{TSTR("Accept"), &Type::Accept},
  };
};
