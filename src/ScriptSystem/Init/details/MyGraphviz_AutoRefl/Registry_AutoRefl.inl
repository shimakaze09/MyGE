// This file is generated by My::MySRefl::AutoRefl

#pragma once

#include <MySRefl/MySRefl.h>

template <>
struct My::MySRefl::TypeInfo<My::MyGraphviz::Registry>
    : TypeInfoBase<My::MyGraphviz::Registry> {
#ifdef MY_MYSREFL_NOT_USE_NAMEOF
  static constexpr char name[26] = "My::MyGraphviz::Registry";
#endif
  static constexpr AttrList attrs = {};
  static constexpr FieldList fields = {
      Field{TSTR(MyMeta::constructor), WrapConstructor<Type()>()},
      Field{TSTR("GetNodes"), &Type::GetNodes},
      Field{TSTR("GetEdges"), &Type::GetEdges},
      Field{TSTR("GetNodeAttrs"), &Type::GetNodeAttrs},
      Field{TSTR("GetEdgeAttrs"), &Type::GetEdgeAttrs},
      Field{TSTR("IsRegisteredNode"), &Type::IsRegisteredNode},
      Field{TSTR("IsRegisteredEdge"),
            static_cast<bool (Type::*)(size_t, size_t) const>(
                &Type::IsRegisteredEdge)},
      Field{
          TSTR("IsRegisteredEdge"),
          static_cast<bool (Type::*)(std::string_view, std::string_view) const>(
              &Type::IsRegisteredEdge)},
      Field{TSTR("GetNodeIndex"), &Type::GetNodeIndex},
      Field{TSTR("GetEdgeIndex"), &Type::GetEdgeIndex},
      Field{TSTR("RegisterNode"), &Type::RegisterNode},
      Field{TSTR("RegisterEdge"), &Type::RegisterEdge},
      Field{TSTR("RegisterNodeAttr"), &Type::RegisterNodeAttr},
      Field{TSTR("RegisterEdgeAttr"), &Type::RegisterEdgeAttr},
      Field{TSTR("DeregisterNodeAttr"), &Type::DeregisterNodeAttr},
      Field{TSTR("DeregisterEdgeAttr"), &Type::DeregisterEdgeAttr},
  };
};
