// This file is generated by My::MySRefl::AutoRefl

#pragma once

#include <MySRefl/MySRefl.h>

template <>
struct My::MySRefl::TypeInfo<My::MyGE::LuaECSAgency>
    : TypeInfoBase<My::MyGE::LuaECSAgency> {
#ifdef MY_MYSREFL_NOT_USE_NAMEOF
  static constexpr char name[27] = "My::MyGE::LuaECSAgency";
#endif
  static constexpr AttrList attrs = {};
  static constexpr FieldList fields = {
      Field{TSTR("SafeOnUpdate"), &Type::SafeOnUpdate},
      Field{TSTR("RegisterEntityJob"), &Type::RegisterEntityJob,
            AttrList{
                Attr{TSTR(MyMeta::default_functions),
                     std::tuple{
                         [](MyECS::Schedule* _0, sol::function systemFunc,
                            std::string name, bool isParallel,
                            MyECS::ArchetypeFilter _1, MyECS::CmptLocator _2,
                            MyECS::SingletonLocator _3) {
                           return Type::RegisterEntityJob(
                               std::forward<MyECS::Schedule*>(_0),
                               std::forward<sol::function>(systemFunc),
                               std::forward<std::string>(name),
                               std::forward<bool>(isParallel),
                               std::forward<MyECS::ArchetypeFilter>(_1),
                               std::forward<MyECS::CmptLocator>(_2),
                               std::forward<MyECS::SingletonLocator>(_3));
                         },
                         [](MyECS::Schedule* _0, sol::function systemFunc,
                            std::string name, bool isParallel,
                            MyECS::ArchetypeFilter _1, MyECS::CmptLocator _2) {
                           return Type::RegisterEntityJob(
                               std::forward<MyECS::Schedule*>(_0),
                               std::forward<sol::function>(systemFunc),
                               std::forward<std::string>(name),
                               std::forward<bool>(isParallel),
                               std::forward<MyECS::ArchetypeFilter>(_1),
                               std::forward<MyECS::CmptLocator>(_2));
                         },
                         [](MyECS::Schedule* _0, sol::function systemFunc,
                            std::string name, bool isParallel,
                            MyECS::ArchetypeFilter _1) {
                           return Type::RegisterEntityJob(
                               std::forward<MyECS::Schedule*>(_0),
                               std::forward<sol::function>(systemFunc),
                               std::forward<std::string>(name),
                               std::forward<bool>(isParallel),
                               std::forward<MyECS::ArchetypeFilter>(_1));
                         },
                         [](MyECS::Schedule* _0, sol::function systemFunc,
                            std::string name, bool isParallel) {
                           return Type::RegisterEntityJob(
                               std::forward<MyECS::Schedule*>(_0),
                               std::forward<sol::function>(systemFunc),
                               std::forward<std::string>(name),
                               std::forward<bool>(isParallel));
                         },
                         [](MyECS::Schedule* _0, sol::function systemFunc,
                            std::string name) {
                           return Type::RegisterEntityJob(
                               std::forward<MyECS::Schedule*>(_0),
                               std::forward<sol::function>(systemFunc),
                               std::forward<std::string>(name));
                         }}},
            }},
      Field{
          TSTR("RegisterChunkJob"), &Type::RegisterChunkJob,
          AttrList{
              Attr{TSTR(MyMeta::default_functions),
                   std::tuple{[](MyECS::Schedule* _0, sol::function systemFunc,
                                 std::string name, MyECS::ArchetypeFilter _1,
                                 bool isParallel, MyECS::SingletonLocator _2) {
                                return Type::RegisterChunkJob(
                                    std::forward<MyECS::Schedule*>(_0),
                                    std::forward<sol::function>(systemFunc),
                                    std::forward<std::string>(name),
                                    std::forward<MyECS::ArchetypeFilter>(_1),
                                    std::forward<bool>(isParallel),
                                    std::forward<MyECS::SingletonLocator>(_2));
                              },
                              [](MyECS::Schedule* _0, sol::function systemFunc,
                                 std::string name, MyECS::ArchetypeFilter _1,
                                 bool isParallel) {
                                return Type::RegisterChunkJob(
                                    std::forward<MyECS::Schedule*>(_0),
                                    std::forward<sol::function>(systemFunc),
                                    std::forward<std::string>(name),
                                    std::forward<MyECS::ArchetypeFilter>(_1),
                                    std::forward<bool>(isParallel));
                              },
                              [](MyECS::Schedule* _0, sol::function systemFunc,
                                 std::string name, MyECS::ArchetypeFilter _1) {
                                return Type::RegisterChunkJob(
                                    std::forward<MyECS::Schedule*>(_0),
                                    std::forward<sol::function>(systemFunc),
                                    std::forward<std::string>(name),
                                    std::forward<MyECS::ArchetypeFilter>(_1));
                              },
                              [](MyECS::Schedule* _0, sol::function systemFunc,
                                 std::string name) {
                                return Type::RegisterChunkJob(
                                    std::forward<MyECS::Schedule*>(_0),
                                    std::forward<sol::function>(systemFunc),
                                    std::forward<std::string>(name));
                              }}},
          }},
      Field{
          TSTR("RegisterJob"), &Type::RegisterJob,
          AttrList{
              Attr{TSTR(MyMeta::default_functions),
                   std::tuple{[](MyECS::Schedule* _0, sol::function systemFunc,
                                 std::string name, MyECS::SingletonLocator _1) {
                                return Type::RegisterJob(
                                    std::forward<MyECS::Schedule*>(_0),
                                    std::forward<sol::function>(systemFunc),
                                    std::forward<std::string>(name),
                                    std::forward<MyECS::SingletonLocator>(_1));
                              },
                              [](MyECS::Schedule* _0, sol::function systemFunc,
                                 std::string name) {
                                return Type::RegisterJob(
                                    std::forward<MyECS::Schedule*>(_0),
                                    std::forward<sol::function>(systemFunc),
                                    std::forward<std::string>(name));
                              }}},
          }},
  };
};
